name: CI/CD
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_and_test:
    name: "Build & Test"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
        
      - name: Cache yarn cache
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
            
      - name: Install Node.js dependencies
        run: yarn install --frozen-lockfile
        
      - name: Lint Node.js projects
        run: |
          # ESLint with GitHub annotation format
          yarn lint --format=@microsoft/eslint-formatter-sarif --output-file=eslint-results.sarif || true
          # Also run with compact format for GitHub annotations if SARIF isn't available
          yarn lint --format=compact 2>&1 | while IFS= read -r line; do
            if [[ $line =~ ^(.+):([0-9]+):([0-9]+):\ (warning|error)\ (.+)$ ]]; then
              file="${BASH_REMATCH[1]}"
              line_num="${BASH_REMATCH[2]}"
              col="${BASH_REMATCH[3]}"
              level="${BASH_REMATCH[4]}"
              message="${BASH_REMATCH[5]}"
              if [[ $level == "error" ]]; then
                echo "::error file=$file,line=$line_num,col=$col::$message"
              else
                echo "::warning file=$file,line=$line_num,col=$col::$message"
              fi
            else
              echo "$line"
            fi
          done
          # Return exit code from yarn lint
          yarn lint > /dev/null
          
      - name: Run Node.js tests
        run: |
          # Run tests with JUnit reporter for annotations
          yarn test --reporter=tap 2>&1 | tee test-results.tap
          # Convert TAP output to GitHub annotations
          awk '
          /^not ok/ {
            match($0, /^not ok [0-9]+ (.+)/, arr)
            print "::error::Test failed: " arr[1]
          }
          /^# FAIL/ {
            match($0, /^# FAIL (.+)/, arr)
            print "::error::Test suite failed: " arr[1]
          }
          ' test-results.tap || true
          # Run tests normally to get proper exit code
          yarn test
          
      - name: Build Node.js projects
        run: |
          yarn build 2>&1 | while IFS= read -r line; do
            if [[ $line =~ ERROR ]]; then
              echo "::error::Build error: $line"
            elif [[ $line =~ WARNING ]]; then
              echo "::warning::Build warning: $line"
            else
              echo "$line"
            fi
          done
          # Ensure build actually succeeds
          yarn build > /dev/null
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt -r dashboard/backend/requirements.txt pyright pytest ruff
          
      - name: Run Ruff
        run: |
          # Ruff already supports GitHub annotation format
          ruff check bot.py cogs/ dashboard/backend --output-format=github
          
      - name: Run Pyright
        run: |
          # Pyright with JSON output for better parsing
          pyright --outputjson bot.py cogs/ dashboard/backend/ 2>&1 | tee pyright-results.json
          # Parse JSON output and convert to GitHub annotations
          python3 -c "
          import json
          import sys
          try:
              with open('pyright-results.json', 'r') as f:
                  content = f.read().strip()
                  if not content:
                      sys.exit(0)
                  data = json.loads(content)
                  for diagnostic in data.get('generalDiagnostics', []):
                      file = diagnostic.get('file', 'unknown')
                      line = diagnostic.get('range', {}).get('start', {}).get('line', 0) + 1
                      col = diagnostic.get('range', {}).get('start', {}).get('character', 0) + 1
                      severity = diagnostic.get('severity', 'error')
                      message = diagnostic.get('message', '')
                      if severity == 'error':
                          print(f'::error file={file},line={line},col={col}::{message}')
                      else:
                          print(f'::warning file={file},line={line},col={col}::{message}')
          except (json.JSONDecodeError, FileNotFoundError, KeyError):
              pass
          " || true
          # Run pyright normally to get proper exit code
          pyright
          
      - name: Run Python Tests
        run: |
          # Run pytest with JUnit XML output
          pytest --junitxml=pytest-results.xml -v 2>&1 | tee pytest-output.txt
          # Parse pytest output for GitHub annotations
          python3 -c "
          import re
          import sys
          try:
              with open('pytest-output.txt', 'r') as f:
                  content = f.read()
                  # Look for FAILED tests
                  failed_pattern = r'FAILED (.+?) - (.+)'
                  for match in re.finditer(failed_pattern, content):
                      test_name = match.group(1)
                      error_msg = match.group(2)
                      print(f'::error::Test failed: {test_name} - {error_msg}')
                  # Look for ERROR tests
                  error_pattern = r'ERROR (.+?) - (.+)'
                  for match in re.finditer(error_pattern, content):
                      test_name = match.group(1)
                      error_msg = match.group(2)
                      print(f'::error::Test error: {test_name} - {error_msg}')
          except FileNotFoundError:
              pass
          " || true
          # Ensure pytest runs with proper exit code
          pytest

  changes:
    name: "Detect Changes"
    needs: build_and_test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      website: ${{ steps.filter.outputs.website }}
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
      bot: ${{ steps.filter.outputs.bot }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Filter changed paths
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            website:
              - 'website/**'
            frontend:
              - 'dashboard/frontend/**'
            backend:
              - 'dashboard/backend/**'
            bot:
              - 'bot.py'
              - 'cogs/**'
              - 'database/**'
              - 'requirements.txt'

  deploy-website:
    name: "Deploy Website"
    needs: changes
    if: needs.changes.outputs.website == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
      statuses: write
    steps:
      - name: Create GitHub Deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: production
          ref: ${{ github.sha }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache yarn cache
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build Website
        run: yarn build

      - name: Install Wrangler
        run: yarn global add wrangler

      - name: Deploy Website
        run: wrangler deploy
        working-directory: ./website
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Update deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env: production

  deploy-dashboard-frontend:
    name: "Deploy Dashboard Frontend"
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
      statuses: write
    steps:
      - name: Create GitHub Deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: frontend-prod
          ref: ${{ github.sha }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache yarn cache
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build Dashboard Frontend
        run: yarn build
        env:
          VITE_DISCORD_CLIENT_ID: ${{ vars.VITE_DISCORD_CLIENT_ID }}

      - name: Install Wrangler
        run: yarn global add wrangler

      - name: Deploy Dashboard Frontend
        run: wrangler deploy
        working-directory: ./dashboard/frontend
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Update deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env: frontend-prod

  deploy-dashboard-backend:
    name: "Deploy Dashboard Backend"
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    permissions:
      deployments: write
      statuses: write
    steps:
      - name: Create GitHub Deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: backend-prod
          ref: ${{ github.sha }}

      - name: Deploy Dashboard Backend
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/discordbot/openguard
            git pull origin main
            sudo /home/discordbot/openguard/scripts/deploy_backend.sh

      - name: Update deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env: backend-prod

  deploy-bot:
    name: "Deploy Bot"
    needs: changes
    if: needs.changes.outputs.bot == 'true'
    runs-on: ubuntu-latest
    permissions:
      deployments: write
      statuses: write
    steps:
      - name: Create GitHub Deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: bot-prod
          ref: ${{ github.sha }}

      - name: Deploy Discord Bot
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/discordbot/openguard
            git pull origin main
            /home/discordbot/.pyenv/versions/3.11.2/bin/python -m pip install -r requirements.txt
            sudo systemctl restart openguard-bot.service

      - name: Update deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env: bot-prod